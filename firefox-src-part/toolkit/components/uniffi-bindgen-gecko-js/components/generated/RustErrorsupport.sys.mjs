// This file was autogenerated by the `uniffi-bindgen-gecko-js` crate.
// Trust me, you don't want to mess with it!

import {
  ArrayBufferDataStream,
  FfiConverter,
  FfiConverterArrayBuffer,
  FfiConverterInt8,
  FfiConverterUInt8,
  FfiConverterInt16,
  FfiConverterUInt16,
  FfiConverterInt32,
  FfiConverterUInt32,
  FfiConverterInt64,
  FfiConverterUInt64,
  FfiConverterFloat32,
  FfiConverterFloat64,
  FfiConverterBoolean,
  FfiConverterBytes,
  FfiConverterString,
  UniFFICallbackHandler,
  UniFFICallbackMethodHandler,
  UniFFIError,
  UniFFIInternalError,
  UniFFITypeError,
  constructUniffiObject,
  handleRustResult,
  uniffiObjectPtr,
} from "moz-src:///toolkit/components/uniffi-js/js/UniFFI.sys.mjs";

// Objects intended to be used in the unit tests
export var UnitTestObjs = {
    uniffiObjectPtr,
};
/**
 * Set the global error reporter.  This is typically done early in startup.
 * @param {ApplicationErrorReporter} errorReporter
 */
export async function setApplicationErrorReporter(
    errorReporter) {
   
FfiConverterTypeApplicationErrorReporter.checkType(errorReporter);
const result = await UniFFIScaffolding.callAsyncWrapper(
    5, // uniffi_error_support_fn_func_set_application_error_reporter
    FfiConverterTypeApplicationErrorReporter.lower(errorReporter),
)
return handleRustResult(
    result,
    (result) => undefined,
    null,
)
}

/**
 * Unset the global error reporter.  This is typically done at shutdown for
 * platforms that want to cleanup references like Desktop.
 */
export async function unsetApplicationErrorReporter() {
   
const result = await UniFFIScaffolding.callAsyncWrapper(
    6, // uniffi_error_support_fn_func_unset_application_error_reporter
)
return handleRustResult(
    result,
    (result) => undefined,
    null,
)
}







/**
 * Application error reporting trait
 * 
 * The application that's consuming application-services implements this via a UniFFI callback
 * interface, then calls `set_application_error_reporter()` to setup a global
 * ApplicationErrorReporter.
 */
export class ApplicationErrorReporter {
    /**
     * reportError
     * @param {string} typeName
     * @param {string} message
     */
    reportError(
        typeName, 
        message) {
      throw Error("reportError not implemented");
    }
    /**
     * reportBreadcrumb
     * @param {string} message
     * @param {string} module
     * @param {number} line
     * @param {number} column
     */
    reportBreadcrumb(
        message, 
        module, 
        line, 
        column) {
      throw Error("reportBreadcrumb not implemented");
    }

}

// Export the FFIConverter object to make external types work.
export class FfiConverterTypeApplicationErrorReporter extends FfiConverter {
    static lower(callbackObj) {
        if (!(callbackObj instanceof ApplicationErrorReporter)) {
            throw new UniFFITypeError("expected 'ApplicationErrorReporter' subclass");
        }
        return uniffiCallbackHandlerErrorsupportApplicationErrorReporter.storeCallbackObj(callbackObj)
    }

    static lift(handleId) {
        return uniffiCallbackHandlerErrorsupportApplicationErrorReporter.getCallbackObj(handleId)
    }

    static read(dataStream) {
        return this.lift(dataStream.readInt64())
    }

    static write(dataStream, callbackObj) {
        dataStream.writeInt64(this.lower(callbackObj))
    }

    static computeSize(callbackObj) {
        return 8;
    }
}
const uniffiCallbackHandlerErrorsupportApplicationErrorReporter = new UniFFICallbackHandler(
    "ApplicationErrorReporter",
    2,
    [
        new UniFFICallbackMethodHandler(
            "reportError",
            [
                FfiConverterString,
                FfiConverterString,
            ],
            (result) => undefined,
            (e) => {
              throw e;
            }
        ),
        new UniFFICallbackMethodHandler(
            "reportBreadcrumb",
            [
                FfiConverterString,
                FfiConverterString,
                FfiConverterUInt32,
                FfiConverterUInt32,
            ],
            (result) => undefined,
            (e) => {
              throw e;
            }
        ),
    ]
);

// Allow the shutdown-related functionality to be tested in the unit tests
UnitTestObjs.uniffiCallbackHandlerErrorsupportApplicationErrorReporter = uniffiCallbackHandlerErrorsupportApplicationErrorReporter;
