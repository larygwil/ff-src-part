/* -*- Mode: C++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 8 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, function, uuid(e5447f62-4b03-497c-81e9-6ab683d20380)]
interface nsIGleanPingTestCallback : nsISupports
{
  void call(in ACString aReason);
};

[scriptable, function, uuid(576baf9b-3f90-48aa-b35b-89a9638cc823)]
interface nsIGleanPingSubmitCallback : nsISupports
{
  Promise call();
};

[scriptable, uuid(5223a48b-687d-47ff-a629-fd4a72d1ecfa)]
interface nsIGleanPing : nsISupports
{
  /**
   * Collect and submit the ping for eventual upload.
   *
   * This will collect all stored data to be included in the ping.
   * Data with lifetime `ping` will then be reset.
   *
   * If the ping is configured with `send_if_empty = false`
   * and the ping currently contains no content,
   * it will not be queued for upload.
   * If the ping is configured with `send_if_empty = true`
   * it will be queued for upload even if empty.
   *
   * Pings always contain the `ping_info` and `client_info` sections.
   * See [ping sections](https://mozilla.github.io/glean/book/user/pings/index.html#ping-sections)
   * for details.
   *
   * @param aReason - Optional. The reason the ping is being submitted.
   *                  Must match one of the configured `reason_codes`.
   */
  void submit([optional] in ACString aReason);

  /**
   * **Test-only API**
   *
   * Register a callback to be called right before this ping is next submitted.
   * The provided function is called exactly once before submitting.
   *
   * Note: The callback will be called on any call to submit.
   * A ping might not be sent afterwards, e.g. if the ping is empty and
   * `send_if_empty` is `false`.
   *
   * Prefer using `testSubmission` over this function when possible because it
   * will assert that the ping is submitted.
   *
   * @param aCallback - The callback to call on the next submit.
   */
  void testBeforeNextSubmit(in nsIGleanPingTestCallback aCallback);

  /**
   * Enable or disable a ping.
   *
   * Disabling a ping causes all data for that ping to be removed from storage
   * and all pending pings of that type to be deleted.
   *
   * @param aValue When true, enable metric collection.
   */
  void setEnabled(in boolean aValue);

  /**
   * **Test-only API**
   *
   * Register a callback to be called right before this ping is next submitted.
   * Then immediately try to trigger ping submission by calling the second callback.
   *
   * NB: To support both sync and async submit callbacks, this function also has
   *     to be async. As such, you must await the result.
   *
   * @param aCallback - The callback to call on the next submit.
   * @param aSubmitCallback - The callback that should trigger ping submission.
   *                          This may be an async function.
   * @param aSubmitTimeout - An optional timemout after which this function will
   *                         reject the returned promise if `aTestCallback` has
   *                         not been called.
   *
   * @returns A promise that resolves after ping submission but rejects if
   *         `aCallback` was not called after the promise returned by
   *         `aSubmitCallback` resolves.
   */
  [implicit_jscontext]
  Promise testSubmission(
    in nsIGleanPingTestCallback aTestCallback,
    in nsIGleanPingSubmitCallback aSubmitCallback,
    [optional] in unsigned long aSubmitTimeoutMs);
};
